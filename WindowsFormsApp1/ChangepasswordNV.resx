<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox3.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        B8PQ5nfH4hm6AAAAAElFTkSuQmCC
</value>
  </data>
</root>